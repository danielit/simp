Ext.require(['Ext.grid.Panel', 'Ext.grid.*', 'Ext.window.Window', 'Ext.container.Viewport', 'Ext.container.Container', 'Ext.layout.container.Border', 'Ext.state.*', 'Ext.data.*', 'Ext.tab.*', 'Ext.util.*', 'Ext.toolbar.Paging', 'Ext.String.*', 'Ext.selection.Model', ]);

HOST = "127.0.0.1" ;
PORT= "8888" ;
SERVER = "http://"+HOST + ":" + PORT ; 

Ext.define('Quan.ClassID', {
	extend: 'Ext.data.Model',
	fields: [{
		name: 'name',
		type: 'string',
	},{
        name:'id',
        type:'string',
    }]
});

Ext.define('Quan.StudentID', {
	extend: 'Ext.data.Model',
	fields: [{
		name: 'name',
		type: 'string',
	},{
        name:'id',
        type:'string',
    }]
});

Ext.define('Quan.Type', {
	extend: 'Ext.data.Model',
	fields: [{
		name: 'name',
		type: 'string',
	},{
        name:'id',
        type:'string',
    }]
});


var class_id_store = Ext.create('Ext.data.Store', {
		model: 'Quan.ClassID',
		autoLoad: true,
		//autoSync: true,
		proxy: {
			type: 'ajax',
			api: {
				read: SERVER + '/getclassids',
			},
			reader: {
				type: 'json',
				successProperty: 'success',
				root: 'classids',
				messageProperty: 'message'
			},
			listeners: {
				exception: function(proxy, response, operation) {
					Ext.MessageBox.show({
						title: 'REMOTE EXCEPTION',
						msg: operation.getError(),
						icon: Ext.MessageBox.ERROR,
						buttons: Ext.Msg.OK
					});
				}
			}
		},
	});
var student_name_id_store = Ext.create('Ext.data.Store', {
		model: 'Quan.StudentID',
		//autoLoad: true,
		//autoSync: true,
		proxy: {
			type: 'ajax',
			api: {
				read: SERVER + '/getstunameidsonclassid',
			},
			reader: {
				type: 'json',
				successProperty: 'success',
				root: 'stunameids',
				messageProperty: 'message'
			},
			listeners: {
				exception: function(proxy, response, operation) {
					Ext.MessageBox.show({
						title: 'REMOTE EXCEPTION',
						msg: operation.getError(),
						icon: Ext.MessageBox.ERROR,
						buttons: Ext.Msg.OK
					});
				}
			}
		},
	});

var quan_type_store = Ext.create('Ext.data.Store', {
		model: 'Quan.Type',
		autoLoad: true,
		//autoSync: true,
		proxy: {
			type: 'ajax',
			api: {
				read: SERVER + '/getquantypes',
			},
			reader: {
				type: 'json',
				successProperty: 'success',
				root: 'quantypes',
				messageProperty: 'message'
			},
			listeners: {
				exception: function(proxy, response, operation) {
					Ext.MessageBox.show({
						title: 'REMOTE EXCEPTION',
						msg: operation.getError(),
						icon: Ext.MessageBox.ERROR,
						buttons: Ext.Msg.OK
					});
				}
			}
		},
	});


Ext.define('Quan.Form', {
	extend: 'Ext.form.Panel',
	alias: 'widget.quanform',
	requires: ['Ext.data.*', 'Ext.form.*'],
	xtype: 'form-quan',

	frame: true,
	title: 'Complete Check Out',
	bodyPadding: 5,

	initComponent: function() {

		/*var states = new Ext.data.Store({
			mmodel: KitchenSink.model.State,
			proxy: {
				type: 'memory',
				reader: {
					type: 'array'
				}
			},
			data: KitchenSink.data.DataSets.states
		}),*/
		var states = new Ext.data.Store({
			fields: ['name', 'num'],
			data: (function() {
				var data = [];
				Ext.Array.forEach(Ext.Date.monthNames, function(name, i) {
					data[i] = {
						name: name,
						num: i + 1
					};
				});
				return data;
			})()
		});
		Ext.apply(this, {
			//width: 100,
			fieldDefaults: {
				labelAlign: 'right',
				//labelWidth: 90,
				msgTarget: 'qtip'
			},
			layout: 'anchor',
            anchor:'100%',
            align:'center',
			items: [{
				xtype: 'container',
				layout: 'hbox',
				defaultType: 'textfield',
				margin: '0 0 5 0',
				items: [{
					xtype: 'combobox',
					name: 'class',
                    id:'class',
					displayField: 'name',
					valueField: 'id',
					queryMode: 'remote',
					emptyText: '请选择班级...',
					fieldLabel: '班级',
					hideLabel: false,
					margins: '0 6 0 0',
					store: class_id_store,//classstore,
					//width: 100,
					allowBlank: false,
					forceSelection: true,
                    listeners:{
                        scop:this,
                        'select':function(combo,records,index){
                            classid = combo.getValue() ;
                            student_name_id_store.load({'params':{'classid':classid}}) ;
                        }
                    }
				},
				{
					xtype: 'combobox',
					name: 'student',
					displayField: 'name',
					valueField: 'id',
					queryMode: 'local',
					emptyText: '请选择姓名...',
                    fieldLabel:'姓名',
					margins: '0 6 0 0',
					store: student_name_id_store,//studentstore,
					//width: 100,
					allowBlank: false,
					forceSelection: true,
                    listeners:{
                        scop:this,
                        'select':function(combo,records,index){}
                    }
				}]
			},
			{
				xtype: 'container',
				layout: 'hbox',
				defaultType: 'textfield',
				margin: '0 0 5 0',
				items: [{
					xtype: 'combobox',
					name: 'quan_type',
					displayField: 'name',
					valueField: 'id',
					queryMode: 'remote',
					emptyText: '请选择量化类型...',
                    fieldLabel:'类型',
					margins: '0 6 0 0',
					store: quan_type_store,//quantypestore,
					//width: 100,
					allowBlank: false,
					forceSelection: true

				},
				{
					xtype: 'datefield',
					//anchor: '100%',
					fieldLabel: '日期',
					name: 'quan_date',
                    allowBlank:false,
					margins: '0 6 0 0',
					maxValue: new Date()
				}]

			},
			{
				xtype: 'container',
				layout: 'hbox',
				defaultType: 'textfield',
				margin: '0 0 5 0',
				items: [{
					xtype: 'numberfield',
					name: 'quan_score',
					id: 'quan_score',
					fieldLabel: '量化分',
					//width:70 ,
					margins: '0 6 0 0',
					value: 0,
					maxValue: 20,
					minValue: - 20,
					allowBlank: false

				}]
			},
			{
				xtype: 'container',
				layout: 'hbox',
				margin: '0 0 5 0',
				items: [{
					xtype: 'textareafield',
					grow: true,
					margins: '0 6 0 0',
					name: 'reason',
                    id:'reason',
					fieldLabel: '原由',
                    allowBlank:false,
					width:500, 
                    //autoWidth:true,
					emptyText: '请填写此次量化处理原因...'
				}]
			}],
			buttons: [{
				text: '取消',
				scope: this,
                //align:'center',
				handler: this.onResetClick
			},
			{
				text: '确定',
				//width: 150,
				scope: this,
				handler: this.onCompleteClick
			}]
		});
		this.callParent();
	},

	onResetClick: function() {
		this.getForm().reset();
	},

	onCompleteClick: function() {
		var form = this.getForm();
		if (form.isValid()) {
			Ext.MessageBox.alert('Submitted Values', form.getValues(true));
		}
	},

	onMailingAddrFieldChange: function(field) {
		var copyToBilling = this.down('[name=billingSameAsMailing]').getValue(),
		copyField = this.down('[name=' + field.billingFieldName + ']');

		if (copyToBilling) {
			copyField.setValue(field.getValue());
		} else {
			copyField.clearInvalid();
		}
	},

	/**
                     *      * Enables or disables the billing address fields according to whether the checkbox is checked.
                     *           * In addition to disabling the fields, they are animated to a low opacity so they don't take
                     *                * up visual attention.
                     *                     */
	onSameAddressChange: function(box, checked) {
		var fieldset = box.ownerCt;
		Ext.Array.forEach(fieldset.previousSibling().query('textfield'), this.onMailingAddrFieldChange, this);
		Ext.Array.forEach(fieldset.query('textfield'), function(field) {
			field.setDisabled(checked);
			// Animate the opacity on each field. Would be more efficient to wrap them in a container
			// and animate the opacity on just the single container element, but IE has a bug where
			// the alpha filter does not get applied on position:relative children.
			// This must only be applied when it is not IE6, as it has issues with opacity when cleartype
			// is enabled
			if (!Ext.isIE6) {
				field.el.animate({
					opacity: checked ? 0.3: 1
				});
			}
		});
	}
});


Ext.onReady(function() {
    //class_id_store.load() ; 
	var win = Ext.create('Ext.container.Container', {
		padding: '0 0 0 0',
		//width: 800,
        autoWidth:true,
		height: Ext.themeName === 'neptune' ? 500: 450,
		renderTo: Ext.getBody(),
		title: '量化管理',
		icon: 'static/pic/css/tabs.gif',
		layout: {
			type: 'vbox',
			align: 'center',
			pack: 'start'
		},
		items: [{
			itemId: 'checkout',
			xtype: 'form-quan',
			title: '日常量化管理'
		}]
	});
});

